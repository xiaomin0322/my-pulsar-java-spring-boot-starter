#连接串地址
#pulsar.client.serviceUrl=pulsar://pulsar0.test.com:6650,pulsar1.test.com:6650,pulsar2.test.com:6650
pulsar.client.serviceUrl=pulsar://10.23.191.242:6650
#权限token
#pulsar.client.token=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiJ9.8Nv_-CV5Nt55PT6BElhIGryGD7IvMM1Mg6-V0RZgqBM
#设置用于处理与broker的连接的线程数
pulsar.client.numIoThreads=10
#监听线程数使用多topic消费设置要用于消息侦听器的线程数
pulsar.client.numListenerThreads=10
#设置客户端库将向单个broker打开的最大连接数
pulsar.client.connectionsPerBroker=10
#操作超时设置 默认30秒
pulsar.client.operationTimeoutMs=30001
#置每个统计信息之间的间隔（默认值：60秒）统计信息将以正值激活状态间隔秒数应设置为至少1秒
pulsar.client.statsIntervalSeconds=60
#配置是否在连接上使用延迟tcp,默认为true。无延迟功能确保数据包尽快发送到网络上，实现低延迟发布至关重要。另一方面，发送大量的小数据包可能会限制整体吞吐量。
pulsar.client.useTcpNoDelay=true
#配置pulsar客户端是否接受来自broker的不受信任的TLS证书（默认值：false）
pulsar.client.tlsAllowInsecureConnection=false
#允许在每个broker连接上发送的并发查找请求数，以防止代理过载。
pulsar.client.concurrentLookupRequest=5000
#为防止broker过载，每个broker连接上允许的最大查找请求数。
pulsar.client.maxLookupRequest=50000
#设置在特定时间段（30秒）内被拒绝的broker请求的最大数目，在此时间段后，当前连接将关闭，客户端将创建一个新连接，以便有机会连接其他broker（默认值：50）。
pulsar.client.maxNumberOfRejectedRequestPerConnection=50
#为每个客户端broker连接设置以秒为单位的心跳检测时间
pulsar.client.keepAliveIntervalSeconds=30



# producer def  config  
#https://pulsar.apache.org/docs/zh-CN/2.5.2/client-libraries-java/#%E9%85%8D%E7%BD%AEproducer%EF%BC%88%E7%94%9F%E4%BA%A7%E8%80%85%EF%BC%89
#发送超时时间，默认 30s
pulsar.producer.def.config.sendTimeoutMs=30001
#消息队列已满时是否阻止发送操作 默认false,当消息队列满，发送操作将立即失败
pulsar.producer.def.config.blockIfQueueFull=false
#控制是否为生产者启用消息的自动批处理
pulsar.producer.def.config.batchingEnabled=true
#消息的队列的最大大小,队列满试,blockIfQueueFull=true才有效
pulsar.producer.def.config.maxPendingMessages=1000
#设置发送的消息将被成批处理的时间段默认值：如果启用了成批消息，则为1毫秒。
pulsar.producer.def.config.batchingMaxPublishDelayMicros=1000
#设置批处理中允许的最大消息数
pulsar.producer.def.config.batchingMaxMessages=1000
#设置生产者的压缩类型
pulsar.producer.def.config.compressionType=LZ4




#consumer   def   config
#https://pulsar.apache.org/docs/zh-CN/2.5.2/client-libraries-java/#configure-consumer
pulsar.consumer.def.config.subscriptionType=Shared
#设置消费者接收队列的大小
pulsar.consumer.def.config.receiverQueueSize=1000
#设置未确认消息的超时
pulsar.consumer.def.config.ackTimeoutMillis=10001
#为共享订阅使用者设置优先级级别，broker 在调度消息时向其提供更高的优先级。
pulsar.consumer.def.config.priorityLevel=0
#如果启用，消费者将从压缩的主题中读取消息，而不是读取主题的完整消息积压。 Read compacted can only be used with exclusive of failover persistent subscriptions
#pulsar.consumer.def.config.readCompacted=true
#设置消费者的订阅初始位置 Earliest 从最早的位置，即第一条消息。 Latest 从最后的位置，即最后一条消息。
pulsar.consumer.def.config.subscriptionInitialPosition=Latest
#默认情况下，使用者使用100ms的分组时间来向代理发送确认。将组时间设置为0会立即发出确认。
pulsar.consumer.def.config.acknowledgementsGroupTimeMicros=100
#当应用程序使用{@link Consumer＃negativeAcknowledge（Message）}时，失败的消息将在固定的超时后重新发送。| TimeUnit.MINUTES.toMicros（1）int | maxTotalReceiverQueueSizeAcrossPartitions|跨分区的最大总接收器队列大小。
pulsar.consumer.def.config.maxTotalReceiverQueueSizeAcrossPartitions=50000
#较长的ack组时间更有效，但会以失败后消息重新传送的轻微增加为代价。| TimeUnit.MILLISECONDS.toMicros（100）long |negativeAckRedeliveryDelayMicros|延迟等待​​，然后重新传递失败的消息。
pulsar.consumer.def.config.negativeAckRedeliveryDelayMicros=1





###############指定topic配置
pulsar.producer.topic-zzm2.topic=topic-zzm2
#发送消息实体类（必须有无参构造方法）
pulsar.producer.topic-zzm2.clazz=io.github.majusko.pulsar.MyMsg
#发送超时时间
pulsar.producer.topic-zzm2.config.sendTimeoutMs=60000




######################指定消費者配置
pulsar.consumer.topic-zzm2.topic=topic-zzm2
#消息实体类（必须有无参构造方法）
pulsar.consumer.topic-zzm2.clazz=io.github.majusko.pulsar.MyMsg
#消费者方法签名（  springbean名称#方法名称(参数名全路径)   ）
pulsar.consumer.topic-zzm2.methodSign=testConsumerConfiguration#topicOneTheListener2(io.github.majusko.pulsar.consumer.ConsumeMessage)
#序列化方式默认JSON
pulsar.consumer.topic-zzm2.serialization=JSON
#消费者名称 例如：consumer-类名#方法名称
pulsar.consumer.topic-zzm2.config.consumerName=consumerName-testConsumerConfiguration#topicOneTheListener2
#订阅名称    例如：subscriptionName-类名#方法名称
pulsar.consumer.topic-zzm2.config.subscriptionName=subscriptionName-testConsumerConfiguration#topicOneTheListener2
#订阅者类型  订阅方式默认共享模式 Shared:共享模式不保证有序，如果对有序有要求使用failover
pulsar.consumer.topic-zzm2.config.subscriptionType=Shared
#ack超时时间
pulsar.consumer.topic-zzm2.config.ackTimeoutMillis=44444
#如果启用，消费者将从压缩的主题中读取消息，而不是读取主题的完整消息积压。 Read compacted can only be used with exclusive of failover persistent subscriptions
#pulsar.consumer.def.config.readCompacted=true
